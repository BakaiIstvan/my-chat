{"version":3,"sources":["proxy.ts","TextInput.tsx","Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","send","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","sendPacket","staySignedIn","src","width","onClick","href","preventDefault","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f2fce620.chunk.js","sourcesContent":["import {MessageDto, InboxDto, OutgoingPacket, IncomingPacket} from './chat'\r\n\r\nexport class EventProducer<M> {\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n\r\n    protected dispatch<K extends keyof M>(type: K, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n\r\n    removeAllEventListener(obj?: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n\r\n}\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap> {\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n\r\n    public sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"ws://echo.websocket.org/\");\r\n        this.ws.addEventListener(\"open\", () => {\r\n            this.ws.send(\"Hello\");\r\n        });\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n\r\nexport var proxy = new Proxy();","import React, { Component } from 'react';\r\nimport './TextInput.css';\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions> {\r\n    state = { value: this.props.value, focus: false };\r\n\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input {...attrs} type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from './proxy';\r\nimport { TextInput } from './TextInput';\r\nexport class Login extends Component {\r\n\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\r\n                    onChange={e => this.setState({ email: e })} onEnter={() => this.onClick()} autofocus={true} />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} />\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e })} onEnter={() => this.onClick()} />}\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { Login } from './Login'\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Login />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}